[
  {
    "id": "prob001",
    "title": "Sum of Two Numbers",
    "description": "Given two integers A and B, return their sum. The integers can be positive, negative, or zero.",
    "inputFormat": "Two integers A and B separated by space.",
    "outputFormat": "One integer: the sum of A and B.",
    "sampleInput": "3 5",
    "sampleOutput": "8",
    "testCases": [
      { "input": "2 3", "output": "5" },
      { "input": "-1 6", "output": "5" }
    ],
    "difficulty": "Easy"
  },
  {
    "id": "prob002",
    "title": "Palindrome Checker",
    "description": "Given a string, check whether it reads the same forwards and backwards. Ignore casing and spaces.",
    "inputFormat": "A single string.",
    "outputFormat": "Yes if the string is a palindrome, otherwise No.",
    "sampleInput": "madam",
    "sampleOutput": "Yes",
    "testCases": [
      { "input": "racecar", "output": "Yes" },
      { "input": "hello", "output": "No" }
    ],
    "difficulty": "Easy"
  },
  {
    "id": "prob003",
    "title": "Factorial",
    "description": "Given a non-negative integer N, return the factorial of N.",
    "inputFormat": "A single integer N (0 ≤ N ≤ 12).",
    "outputFormat": "One integer: factorial of N.",
    "sampleInput": "5",
    "sampleOutput": "120",
    "testCases": [
      { "input": "0", "output": "1" },
      { "input": "4", "output": "24" }
    ],
    "difficulty": "Easy"
  },
  {
    "id": "prob004",
    "title": "Count Vowels",
    "description": "Given a lowercase string, count the number of vowels (a, e, i, o, u).",
    "inputFormat": "A single lowercase string.",
    "outputFormat": "One integer: number of vowels.",
    "sampleInput": "education",
    "sampleOutput": "5",
    "testCases": [
      { "input": "hello", "output": "2" },
      { "input": "why", "output": "0" }
    ],
    "difficulty": "Easy"
  },
  {
    "id": "prob005",
    "title": "Find Maximum",
    "description": "Given a list of integers, return the maximum element.",
    "inputFormat": "First line: integer N. Second line: N integers.",
    "outputFormat": "One integer: the maximum.",
    "sampleInput": "5\n1 3 2 7 4",
    "sampleOutput": "7",
    "testCases": [
      { "input": "3\n-5 -1 -3", "output": "-1" },
      { "input": "4\n100 99 101 98", "output": "101" }
    ],
    "difficulty": "Easy"
  },
  {
    "id": "prob006",
    "title": "Prime Number Check",
    "description": "Given an integer N, determine whether it is a prime number.",
    "inputFormat": "A single integer N.",
    "outputFormat": "Yes if prime, No otherwise.",
    "sampleInput": "7",
    "sampleOutput": "Yes",
    "testCases": [
      { "input": "10", "output": "No" },
      { "input": "13", "output": "Yes" }
    ],
    "difficulty": "Intermediate"
  },
  {
    "id": "prob007",
    "title": "Reverse Words in a Sentence",
    "description": "Given a sentence, reverse the order of the words.",
    "inputFormat": "A string of words.",
    "outputFormat": "Words reversed in order.",
    "sampleInput": "hello world from codebattle",
    "sampleOutput": "codebattle from world hello",
    "testCases": [
      { "input": "open ai is amazing", "output": "amazing is ai open" },
      { "input": "this is great", "output": "great is this" }
    ],
    "difficulty": "Intermediate"
  },
  {
    "id": "prob008",
    "title": "Balanced Parentheses",
    "description": "Given a string of parentheses, determine if it is balanced.",
    "inputFormat": "A string of '(', ')'.",
    "outputFormat": "Yes if balanced, No otherwise.",
    "sampleInput": "(()())",
    "sampleOutput": "Yes",
    "testCases": [
      { "input": "((())", "output": "No" },
      { "input": "(()(()))", "output": "Yes" }
    ],
    "difficulty": "Intermediate"
  },
  {
    "id": "prob009",
    "title": "Fibonacci Number",
    "description": "Return the N-th Fibonacci number (0-indexed).",
    "inputFormat": "An integer N (0 ≤ N ≤ 30).",
    "outputFormat": "The N-th Fibonacci number.",
    "sampleInput": "7",
    "sampleOutput": "13",
    "testCases": [
      { "input": "0", "output": "0" },
      { "input": "10", "output": "55" }
    ],
    "difficulty": "Intermediate"
  },
  {
    "id": "prob010",
    "title": "Remove Duplicates from Array",
    "description": "Given an array of integers, remove duplicates and return the result in sorted order.",
    "inputFormat": "First line: integer N. Second line: N integers.",
    "outputFormat": "Unique integers in sorted order.",
    "sampleInput": "6\n1 3 2 3 2 1",
    "sampleOutput": "1 2 3",
    "testCases": [
      { "input": "5\n4 5 4 5 4", "output": "4 5" },
      { "input": "4\n9 8 7 8", "output": "7 8 9" }
    ],
    "difficulty": "Intermediate"
  },
  {
    "id": "prob011",
    "title": "Longest Unique Substring",
    "description": "Find the length of the longest substring without repeating characters.",
    "inputFormat": "A single string.",
    "outputFormat": "Length of the longest unique substring.",
    "sampleInput": "abcabcbb",
    "sampleOutput": "3",
    "testCases": [
      { "input": "bbbbb", "output": "1" },
      { "input": "pwwkew", "output": "3" }
    ],
    "difficulty": "Challenger"
  },
  {
    "id": "prob012",
    "title": "Merge Intervals",
    "description": "Given a list of intervals, merge all overlapping intervals.",
    "inputFormat": "A list of intervals in the form [[start1, end1], ...]",
    "outputFormat": "Merged intervals.",
    "sampleInput": "[[1,3],[2,6],[8,10],[15,18]]",
    "sampleOutput": "[[1,6],[8,10],[15,18]]",
    "testCases": [
      { "input": "[[1,4],[4,5]]", "output": "[[1,5]]" },
      { "input": "[[1,10],[2,3]]", "output": "[[1,10]]" }
    ],
    "difficulty": "Challenger"
  },
  {
    "id": "prob013",
    "title": "Kth Largest Element",
    "description": "Find the K-th largest element in an unsorted array.",
    "inputFormat": "First line: integer N and K. Second line: N integers.",
    "outputFormat": "The K-th largest element.",
    "sampleInput": "6 2\n3 2 1 5 6 4",
    "sampleOutput": "5",
    "testCases": [
      { "input": "5 1\n7 10 4 3 20", "output": "20" },
      { "input": "5 3\n7 10 4 3 20", "output": "7" }
    ],
    "difficulty": "Challenger"
  },
  {
    "id": "prob014",
    "title": "LRU Cache Simulation",
    "description": "Simulate an LRU cache with a given capacity and print the state after each operation.",
    "inputFormat": "Operations (GET key or PUT key value).",
    "outputFormat": "Cache state after each operation.",
    "sampleInput": "PUT 1 1\nPUT 2 2\nGET 1\nPUT 3 3\nGET 2",
    "sampleOutput": "1\n-1",
    "testCases": [],
    "difficulty": "Challenger"
  },
  {
    "id": "prob015",
    "title": "Word Ladder",
    "description": "Find the shortest transformation sequence from beginWord to endWord using a dictionary.",
    "inputFormat": "beginWord, endWord, wordList.",
    "outputFormat": "Length of shortest transformation, or 0.",
    "sampleInput": "hit, cog, [hot, dot, dog, lot, log, cog]",
    "sampleOutput": "5",
    "testCases": [],
    "difficulty": "Challenger"
  },
  {
    "id": "prob016",
    "title": "Sudoku Validator",
    "description": "Given a 9x9 Sudoku board, determine if it is valid.",
    "inputFormat": "A 2D array of characters.",
    "outputFormat": "Yes or No.",
    "sampleInput": "[['5','3','.','.','7','.','.','.','.'], ...]",
    "sampleOutput": "Yes",
    "testCases": [],
    "difficulty": "Challenger"
  },
  {
    "id": "prob017",
    "title": "Median of Two Sorted Arrays",
    "description": "Find the median of two sorted arrays.",
    "inputFormat": "Two sorted arrays A and B.",
    "outputFormat": "Median value (float).",
    "sampleInput": "[1, 3], [2]",
    "sampleOutput": "2.0",
    "testCases": [],
    "difficulty": "Challenger"
  },
  {
    "id": "prob018",
    "title": "Detect Cycle in Directed Graph",
    "description": "Detect whether a cycle exists in a directed graph.",
    "inputFormat": "Graph as adjacency list.",
    "outputFormat": "Yes or No.",
    "sampleInput": "5\n0 -> 1\n1 -> 2\n2 -> 3\n3 -> 4\n4 -> 1",
    "sampleOutput": "Yes",
    "testCases": [],
    "difficulty": "Challenger"
  },
  {
    "id": "prob019",
    "title": "N-Queens Problem",
    "description": "Place N queens on an NxN board so that no two queens threaten each other.",
    "inputFormat": "Integer N.",
    "outputFormat": "Number of possible solutions.",
    "sampleInput": "4",
    "sampleOutput": "2",
    "testCases": [],
    "difficulty": "Challenger"
  },
  {
    "id": "prob020",
    "title": "Expression Evaluator",
    "description": "Evaluate a mathematical expression with +, -, *, / and parentheses.",
    "inputFormat": "A single expression string.",
    "outputFormat": "Result (integer).",
    "sampleInput": "3 + (2 * 2)",
    "sampleOutput": "7",
    "testCases": [],
    "difficulty": "Challenger"
  }
]
